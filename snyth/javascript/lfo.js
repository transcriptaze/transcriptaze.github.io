const e=2*Math.PI,t=720,a=t*Float32Array.BYTES_PER_ELEMENT,s=1440*Float32Array.BYTES_PER_ELEMENT;class r extends AudioWorkletProcessor{constructor(){super(),this.port.onmessage=this.onMessage.bind(this),this.α=0,this.v=0,this.sab=new SharedArrayBuffer(s),this.version=0,this.wavetable=[new Float32Array(this.sab,0*a,t),new Float32Array(this.sab,1*a,t)],this.port.postMessage({message:"wavetable",sab:this.sab,N:t,pages:2,version:this.version})}static get parameterDescriptors(){return[{name:"on",defaultValue:0,minValue:0,maxValue:1,automationRate:"k-rate"},{name:"frequency",defaultValue:.1,minValue:.1,maxValue:11,automationRate:"k-rate"},{name:"min",defaultValue:-1,minValue:-1,maxValue:1,automationRate:"k-rate"},{name:"max",defaultValue:1,minValue:-1,maxValue:1,automationRate:"k-rate"}]}onMessage(e){if("wavetable"===e.data.message)this.version=e.data.version}process(a,s,r){const i=s[0],n=o(r.on[0],0,1),l=r.frequency[0],u=o(r.min[0],-1,1),h=o(r.max[0],-1,1);this.v<n?this.v=o(this.v+.005,0,1):this.v>n&&(this.v=o(this.v-.005,0,1));const c=this.version%2,m=this.wavetable[c],f=1-this.v*(1-(h+u)/2),v=this.v*(h-u)/2;return this.α=function(a,s,r,o,i,n,l){const u=t,h=n.length,c=e*s/44100,m=t=>{const s=function(e,t){for(;e<0;)e+=t;return e%t}(u*t/e,u),r=Math.floor(s)%u,o=Math.ceil(s)%u,i=s%1;return(1-i)*a[r]+i*a[o]};for(let e=0;e<h;e++)n[e]=r+o*m(i+e*c);return(i+h*c)%e}(m,l,f,v,this.α,i[0]),!0}}function o(e,t,a){return Math.min(Math.max(e,t),a)}try{console.log("... registering LFOs"),registerProcessor("lfo.1",r),registerProcessor("lfo.2",r),registerProcessor("lfo.3",r),registerProcessor("lfo.4",r),console.log("... registered LFOs")}catch(e){console.error(`${e}`)}export{r as LFO};
